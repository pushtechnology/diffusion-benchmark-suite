<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="churn-suite" default="perf-suite" basedir=".">
	<property environment="env" />
	<property name="client.jvm.args" value="-server -Xms2g -Xmx2g" />
	<property name="client.threads" value="1" />
	<property name="max.messages" value="1000000" />
	<property name="max.time" value="0.2" />

	<property name="suite.ant.file" value="churn-suite.xml" />

	<import file="perf-test-suite-common.xml" />
	<!-- before/after are empty as we want the server up for duration of suite -->
	<target name="before" />
	<target name="after" />

	<target name="before-suite">
		<if>
			<equals arg1="${skip.server}" arg2="true" />
			<then />
			<elseif>
				<equals arg1="${diffusion.host}" arg2="localhost" />
				<then>
					<kill-diffusion />
					<assert-no-diffusion-running />
					<clean-diffusion />
					<antcall target="start-echo" />
					<start-diffusion />
				</then>
			</elseif>
			<else>
				<sshexec host="${diffusion.host}" username="${ssh.username}" password="${ssh.password}"
					command="cd ${benchmark-server.dir};ant -f churn-suite.xml before-suite" />
			</else>
		</if>
	</target>
	<target name="after-suite">
		<if>
			<equals arg1="${skip.server}" arg2="true" />
			<then />
			<elseif>
				<equals arg1="${diffusion.host}" arg2="localhost" />
				<then>
					<kill-diffusion />
				</then>
			</elseif>
			<else>
				<sshexec host="${diffusion.host}" username="${ssh.username}" password="${ssh.password}"
					command="cd ${benchmark-server.dir};ant -f churn-suite.xml after-suite" />
			</else>
		</if>
	</target>
	<target name="perfTest-churn1">
		<run-client test.name="churn1" />
	</target>
	<target name="perfTest-churn2">
		<run-client test.name="churn2" />
	</target>
	<target name="perfTest-churn3">
		<run-client test.name="churn3" />
	</target>
	<macrodef name="run-client">
		<!-- Client attributes -->
		<attribute name="client.jvm.memory" default="8g" />
		<attribute name="initial.clients" default="1000" />
		<attribute name="max.clients" default="1000000" />
		<attribute name="client.create.pause.seconds" default="1" />
		<attribute name="message.size" default="125" />
		<attribute name="clients.increment" default="25" /> 
		<attribute name="test.name" />
		<sequential>
			<!-- Start Client -->
			<var name="full-test-name" value="@{test.name}" />
			<if>
				<equals arg1="${skip.client}" arg2="true" />
				<then>
					<input>Press Return key to continue...</input>
				</then>
				<else>
					<if>
						<available file="${full-test-name}.settings" />
						<then>
							<echo message="Using existing settings file: ${full-test-name}.settings" />
						</then>
						<else>
							<echo file="${full-test-name}.settings">
#Client settings:
initial.clients=@{initial.clients}
max.clients=@{max.clients}
clients.increment=@{clients.increment}
client.create.pause.seconds=@{client.create.pause.seconds}
inbound.threadpool.size=${client.threads}
client.jvm.args=${client.jvm.args}
diffusion.url=${diffusion.url}
diffusion.host=${diffusion.host}
local.interfaces=${diffusion.client.nics}
experiment.output=${full-test-name}.csv
clients.output=${full-test-name}-clients.log
max.test.time.minutes=${max.time}
max.test.messages=${max.messages}
</echo>
						</else>
					</if>
					<echo message="...Starting test client..." />
					<java classname="com.pushtechnology.benchmarks.experiments.ExperimentRunner"
						fork="true" failonerror="true" jvmargs="${client.jvm.args}">
						<sysproperty key="verbose" value="${verbose}" />
						<sysproperty key="log.connection.exception" value="false" />
						<arg value="com.pushtechnology.benchmarks.experiments.ConnectAndSubscribeChurnExperiment" />
						<arg value="${full-test-name}.settings" />
						<classpath refid="test.runtime.classpath" />
					</java>
					<echo message="...Test client finished..." />
				</else>
			</if>
		</sequential>
	</macrodef>





		<macrodef name="configure-injector">
			<!-- 10 times a second -->
			<attribute name="publish.pause.seconds" default="0.1" />
			<attribute name="message.size" default="100" />
			<attribute name="initial.messages" default="10" />
			<attribute name="message.increment.interval" default="10" />
			<attribute name="message.increment" default="10" />
			<attribute name="initial.topic.num" default="100" />
			<attribute name="topic.increment.interval" default="10" />
			<attribute name="topic.increment" default="10" />
			<attribute name="output" />
			<sequential>
				<copy file="etc/Injector.xml" tofile="etc/@{output}" overwrite="true">
					<filterset begintoken="@" endtoken="@">
						<filter token="conflationMode" value="NONE" />
						<filter token="pauseSeconds" value="@{publish.pause.seconds}" />
						<filter token="messageSize" value="@{message.size}" />
						<filter token="initialMessages" value="@{initial.messages}" />
						<filter token="messageIncrementIntervalInPauses" value="@{message.increment.interval}" />
						<filter token="messageIncrement" value="@{message.increment}" />
						<filter token="initialTopicNum" value="@{initial.topic.num}" />
						<filter token="topicIncrementIntervalInPauses" value="@{topic.increment.interval}" />
						<filter token="topicIncrement" value="@{topic.increment}" />
					</filterset>
				</copy>
			</sequential>
		</macrodef>
	<target name="start-injector">
		<configure-injector output="${test.name}.xml"
			publish.pause.seconds="${publish.pause.seconds}"
			message.size="${message.size}"
			initial.messages="${initial.messages}"
			message.increment.interval="${message.increment.interval}"
			message.increment="${message.increment}"
			initial.topic.num="${initial.topic.num}"
			topic.increment.interval="${topic.increment.interval}"
			topic.increment="${topic.increment}" />
		<dar publisher.name="${test.name}" />
		<deploy-dar dar.name="${test.name}.dar" />
	</target>
	<target name="stop-injector">
		<undeploy-dar dar.name="${test.name}.dar" />
		<delete file="${test.name}.dar" />
	</target>
	<target name="start-echo">
		<dar-generic publisher.name="ChurnPublisher" />
		<deploy-dar dar.name="ChurnPublisher.dar" />
	</target>
	<target name="stop-echo">
		<undeploy-dar dar.name="ChurnPublisher.dar" />
		<delete file="ChurnPublisher.dar" />
	</target>
</project>
